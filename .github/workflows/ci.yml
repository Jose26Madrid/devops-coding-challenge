name: CI/CD

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop]

jobs:

  ci-develop:
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

      redis:
        image: redis:7
        ports:
          - 6379:6379

    env:
      DJANGO_SETTINGS_MODULE: config.settings.local
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      CELERY_BROKER_URL: redis://localhost:6379/0
      REDIS_URL: redis://localhost:6379/0
      USE_DOCKER: "no"
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/local.txt
          pip install black isort flake8

      - name: Run isort
        run: isort .

      - name: Run black
        run: black .

      - name: Commit and push formatting changes
        if: github.event_name != 'pull_request'
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config --global user.name "github-actions"
            git config --global user.email "actions@github.com"
            git add .
            git commit -m "style: autoformat with isort and black"
            git push
          fi

      - name: Run flake8 (non-blocking)
        run: flake8 . || true

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: pytest --disable-warnings

      - name: Generate Docker tag
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "TAG_NAME=devops-$(date +'%d-%m')" >> $GITHUB_ENV

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          docker build \
            -t $IMAGE_NAME:${{ github.sha }} \
            -t $IMAGE_NAME:$TAG_NAME \
            -f compose/local/django/Dockerfile .

      - name: Push Docker images
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:$TAG_NAME

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: table
          output: trivy-report.txt
          exit-code: 0
          severity: CRITICAL,HIGH

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

  cd-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: config.settings.local
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      CELERY_BROKER_URL: redis://localhost:6379/0
      REDIS_URL: redis://localhost:6379/0
      USE_DOCKER: "no"
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate Docker tag
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "TAG_NAME=devops-$(date +'%d-%m')" >> $GITHUB_ENV

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull Docker image
        run: docker pull $IMAGE_NAME:$TAG_NAME

      - name: Run migrations
        run: |
          docker run --rm \
            -e DJANGO_SETTINGS_MODULE \
            -e DATABASE_URL \
            -e CELERY_BROKER_URL \
            -e REDIS_URL \
            -e USE_DOCKER \
            $IMAGE_NAME:$TAG_NAME python manage.py migrate

      - name: Deploy to production
        run: |
          echo "ðŸš€ AquÃ­ irÃ­a tu despliegue real (Docker Compose, SSH, Kubernetes, etc)"

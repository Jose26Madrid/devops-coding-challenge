name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install project dependencies
        run: |
          pip install -r requirements/base.txt
          pip install -r requirements/local.txt

      - name: Install format & lint tools
        run: pip install black isort flake8

      - name: Run isort
        run: isort .

      - name: Run black
        run: black .

      - name: Commit and push formatting changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config --global user.name "github-actions"
            git config --global user.email "actions@github.com"
            git add .
            git commit -m "style: autoformat code with isort and black"
            git push
          else
            echo "No formatting changes to commit."
          fi

      - name: Run flake8 (non-blocking)
        run: flake8 . || true


  test-and-migrate:
    needs: lint-and-format
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379

    env:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DJANGO_SETTINGS_MODULE: config.settings.test
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      CELERY_BROKER_URL: redis://localhost:6379/0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install project dependencies
        run: |
          pip install -r requirements/base.txt
          pip install -r requirements/local.txt

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: pytest --disable-warnings


  docker-build-push-scan:
    needs: test-and-migrate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set image name (lowercase)
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:${{ github.sha }} -f compose/local/django/Dockerfile .

      - name: Push Docker image to GHCR
        run: docker push $IMAGE_NAME:${{ github.sha }}

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: table
          output: trivy-report.txt
          exit-code: 0
          severity: CRITICAL,HIGH

      - name: Upload Trivy scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt
